{
  "swagger": "2.0",
  "info": {
    "title": "TDW18 User REST api",
    "description": "[UPM] TDW18 User REST api operations",
    "license": {
      "name": "MIT",
      "url": "/api-docs/LICENSE.txt"
    },
    "version": "0.1.0"
  },
  "host": "localhost:8080",
  "basePath": "/api/v1",
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/login": {
      "post": {
        "tags": [
          "login"
        ],
        "summary": "Returns TDW Users api token",
        "description": "Returns TDW Users api token.",
        "operationId": "tdw_post_login",
        "parameters": [
          {
            "name": "username",
            "in": "formData",
            "description": "User name",
            "allowEmptyValue": false,
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "formData",
            "description": "User password",
            "allowEmptyValue": false,
            "required": true,
            "type": "string",
            "format": "password"
          }
        ],
        "responses": {
          "200": {
            "description": "TDW Users api token",
            "schema": {
              "type": "object",
              "example": {
                "X-Token": "<JSON web token>"
              }
            },
            "headers": {
              "X-Token": {
                "description": "api token",
                "type": "string"
              }
            }
          },
          "404": {
            "$ref": "#/responses/404_Resource_Not_Found_Response"
          }
        }
      }
    },
    "/questions": {
      "get": {
        "tags": [
          "Questions"
        ],
        "summary": "Returns all questions",
        "description": "Returns all questions from the system that the user has access to.",
        "operationId": "tdw_cget_cuestions",
        "responses": {
          "200": {
            "description": "Question array response",
            "schema": {
              "$ref": "#/definitions/QuestionsArray"
            }
          },
          "401": {
            "$ref": "#/responses/401_Standard_Response"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden_Response"
          },
          "404": {
            "$ref": "#/responses/404_Resource_Not_Found_Response"
          }
        },
        "security": [
          {
            "ResultsSecurity": []
          }
        ]
      },
      "post": {
        "tags": [
          "Questions"
        ],
        "summary": "Creates a new question",
        "description": "Creates a new question",
        "operationId": "tdw_post_questions",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "`Question` properties to add to the system",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QuestionData"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "`Created` Question created",
            "schema": {
              "$ref": "#/definitions/Question"
            }
          },
          "400": {
            "description": "`Bad Request` Username or email already exists.",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          },
          "401": {
            "$ref": "#/responses/401_Standard_Response"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden_Response"
          },
          "422": {
            "description": "`Unprocessable entity` idCuestion is left out",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "security": [
          {
            "ResultsSecurity": []
          }
        ]
      },
      "options": {
        "tags": [
          "Questions"
        ],
        "summary": "Provides the list of HTTP supported methods",
        "description": "Return a `Allow` header with a list of HTTP supported methods.",
        "operationId": "tdw_options_questions",
        "responses": {
          "200": {
            "description": "`Allow` header <Response body is empty>"
          }
        }
      }
    },
    "/questions/{questionId}": {
      "get": {
        "tags": [
          "Questions"
        ],
        "summary": "Returns a question based on a single ID",
        "description": "Returns the question identified by `questionId`.",
        "operationId": "tdw_get_questions",
        "parameters": [
          {
            "$ref": "#/parameters/questionId"
          }
        ],
        "responses": {
          "200": {
            "description": "Cuestion",
            "schema": {
              "$ref": "#/definitions/Question"
            }
          },
          "401": {
            "$ref": "#/responses/401_Standard_Response"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden_Response"
          },
          "404": {
            "$ref": "#/responses/404_Resource_Not_Found_Response"
          }
        },
        "security": [
          {
            "ResultsSecurity": []
          }
        ]
      },
      "put": {
        "tags": [
          "Questions"
        ],
        "summary": "Updates a question",
        "description": "Updates the question identified by `questionId`.",
        "operationId": "tdw_put_questions",
        "parameters": [
          {
            "$ref": "#/parameters/questionId"
          },
          {
            "name": "data",
            "in": "body",
            "description": "`Question` data to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QuestionData"
            }
          }
        ],
        "responses": {
          "209": {
            "description": "`Content Returned` Question previously existed and is now updated",
            "schema": {
              "$ref": "#/definitions/Question"
            }
          },
          "400": {
            "description": "`Bad Request` User name or e-mail already exists",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          },
          "401": {
            "$ref": "#/responses/401_Standard_Response"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden_Response"
          },
          "404": {
            "$ref": "#/responses/404_Resource_Not_Found_Response"
          }
        },
        "security": [
          {
            "ResultsSecurity": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Questions"
        ],
        "summary": "Deletes a question",
        "description": "Deletes the question identified by `userId`.",
        "operationId": "tdw_delete_questions",
        "parameters": [
          {
            "$ref": "#/parameters/questionId"
          }
        ],
        "responses": {
          "204": {
            "description": "Question deleted <Response body is empty>"
          },
          "401": {
            "$ref": "#/responses/401_Standard_Response"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden_Response"
          },
          "404": {
            "$ref": "#/responses/404_Resource_Not_Found_Response"
          }
        },
        "security": [
          {
            "ResultsSecurity": []
          }
        ]
      },
      "options": {
        "tags": [
          "Questions"
        ],
        "summary": "Provides the list of HTTP supported methods",
        "description": "Return a `Allow` header with a list of HTTP supported methods.",
        "operationId": "tdw_options_questions_id",
        "parameters": [
          {
            "$ref": "#/parameters/questionId"
          }
        ],
        "responses": {
          "200": {
            "description": "`Allow` header <Response body is empty>"
          }
        }
      }
    },
    "/rationings": {
      "get": {
        "tags": [
          "Rationings"
        ],
        "summary": "Returns all rationings",
        "description": "Returns all rationings from the system that the user has access to.",
        "operationId": "tdw_cget_rationings",
        "responses": {
          "200": {
            "description": "Rationing array response",
            "schema": {
              "$ref": "#/definitions/RazonamientoArray"
            }
          },
          "401": {
            "$ref": "#/responses/401_Standard_Response"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden_Response"
          },
          "404": {
            "$ref": "#/responses/404_Resource_Not_Found_Response"
          }
        },
        "security": [
          {
            "ResultsSecurity": []
          }
        ]
      },
      "post": {
        "tags": [
          "Rationings"
        ],
        "summary": "Creates a new rationing",
        "description": "Creates a new rationing",
        "operationId": "tdw_post_rationings",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "`Rationing` properties to add to the system",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RazonamientoData"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "`Created` Rationing created",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "`Bad Request` Rationing id already exists.",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          },
          "401": {
            "$ref": "#/responses/401_Standard_Response"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden_Response"
          },
          "422": {
            "description": "`Unprocessable entity` Title, idQuestion or justifyRationing is left out",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "security": [
          {
            "ResultsSecurity": []
          }
        ]
      },
      "options": {
        "tags": [
          "Rationings"
        ],
        "summary": "Provides the list of HTTP supported methods",
        "description": "Return a `Allow` header with a list of HTTP supported methods.",
        "operationId": "tdw_options_solutions",
        "responses": {
          "200": {
            "description": "`Allow` header <Response body is empty>"
          }
        }
      }
    },
    "/rationings/{idRationing}": {
      "get": {
        "tags": [
          "Rationings"
        ],
        "summary": "Returns a rationing based on a single ID",
        "description": "Returns the rationing identified by `idRationing`.",
        "operationId": "tdw_get_rationings",
        "parameters": [
          {
            "$ref": "#/parameters/idRationing"
          }
        ],
        "responses": {
          "200": {
            "description": "Rationing",
            "schema": {
              "$ref": "#/definitions/Razonamiento"
            }
          },
          "401": {
            "$ref": "#/responses/401_Standard_Response"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden_Response"
          },
          "404": {
            "$ref": "#/responses/404_Resource_Not_Found_Response"
          }
        },
        "security": [
          {
            "ResultsSecurity": []
          }
        ]
      },
      "put": {
        "tags": [
          "Rationings"
        ],
        "summary": "Updates a rationing",
        "description": "Updates the rationing identified by `idRationing`.",
        "operationId": "tdw_put_rationings",
        "parameters": [
          {
            "$ref": "#/parameters/idRationing"
          },
          {
            "name": "data",
            "in": "body",
            "description": "`Rationing` data to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RazonamientoData"
            }
          }
        ],
        "responses": {
          "209": {
            "description": "`Content Returned` Rationing previously existed and is now updated",
            "schema": {
              "$ref": "#/definitions/Razonamiento"
            }
          },
          "400": {
            "description": "`Bad Request`",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          },
          "401": {
            "$ref": "#/responses/401_Standard_Response"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden_Response"
          },
          "422": {
            "description": "`Unprocessable entity` idSolution, title or justifyRationing is left out",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "security": [
          {
            "ResultsSecurity": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Rationings"
        ],
        "summary": "Deletes a rationing",
        "description": "Deletes the rationing identified by `rationingId`.",
        "operationId": "tdw_delete_rationings",
        "parameters": [
          {
            "$ref": "#/parameters/idRationing"
          }
        ],
        "responses": {
          "204": {
            "description": "Rationing deleted <Response body is empty>"
          },
          "401": {
            "$ref": "#/responses/401_Standard_Response"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden_Response"
          },
          "404": {
            "$ref": "#/responses/404_Resource_Not_Found_Response"
          }
        },
        "security": [
          {
            "ResultsSecurity": []
          }
        ]
      },
      "options": {
        "tags": [
          "Rationings"
        ],
        "summary": "Provides the list of HTTP supported methods",
        "description": "Return a `Allow` header with a list of HTTP supported methods.",
        "operationId": "tdw_options_rationing_id",
        "parameters": [
          {
            "$ref": "#/parameters/idRationing"
          }
        ],
        "responses": {
          "200": {
            "description": "`Allow` header <Response body is empty>"
          }
        }
      }
    },
    "/solutions": {
      "get": {
        "tags": [
          "Solutions"
        ],
        "summary": "Returns all solutions",
        "description": "Returns all solutions from the system that the user has access to.",
        "operationId": "tdw_cget_solutions",
        "responses": {
          "200": {
            "description": "Solucion array response",
            "schema": {
              "$ref": "#/definitions/SolucionArray"
            }
          },
          "401": {
            "$ref": "#/responses/401_Standard_Response"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden_Response"
          },
          "404": {
            "$ref": "#/responses/404_Resource_Not_Found_Response"
          }
        },
        "security": [
          {
            "ResultsSecurity": []
          }
        ]
      },
      "post": {
        "tags": [
          "Solutions"
        ],
        "summary": "Creates a new solution",
        "description": "Creates a new solution",
        "operationId": "tdw_post_solutions",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "`Solution` properties to add to the system",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SolucionData"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "`Created` Solution created",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "`Bad Request` Question title already exists.",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          },
          "401": {
            "$ref": "#/responses/401_Standard_Response"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden_Response"
          },
          "422": {
            "description": "`Unprocessable entity` Student, question title or proposed solution is left out",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "security": [
          {
            "ResultsSecurity": []
          }
        ]
      },
      "options": {
        "tags": [
          "Solutions"
        ],
        "summary": "Provides the list of HTTP supported methods",
        "description": "Return a `Allow` header with a list of HTTP supported methods.",
        "operationId": "tdw_options_solutions",
        "responses": {
          "200": {
            "description": "`Allow` header <Response body is empty>"
          }
        }
      }
    },
    "/solutions/{idAnswer}": {
      "get": {
        "tags": [
          "Solutions"
        ],
        "summary": "Returns a solution based on a single ID",
        "description": "Returns the solution identified by `answerId`.",
        "operationId": "tdw_get_solutions",
        "parameters": [
          {
            "$ref": "#/parameters/idAnswer"
          }
        ],
        "responses": {
          "200": {
            "description": "User",
            "schema": {
              "$ref": "#/definitions/Solucion"
            }
          },
          "401": {
            "$ref": "#/responses/401_Standard_Response"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden_Response"
          },
          "404": {
            "$ref": "#/responses/404_Resource_Not_Found_Response"
          }
        },
        "security": [
          {
            "ResultsSecurity": []
          }
        ]
      },
      "put": {
        "tags": [
          "Solutions"
        ],
        "summary": "Updates a solution",
        "description": "Updates the solution identified by `idAnswer`.",
        "operationId": "tdw_put_solutions",
        "parameters": [
          {
            "$ref": "#/parameters/idAnswer"
          },
          {
            "name": "data",
            "in": "body",
            "description": "`Solution` data to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SolucionData"
            }
          }
        ],
        "responses": {
          "209": {
            "description": "`Content Returned` Solucion previously existed and is now updated",
            "schema": {
              "$ref": "#/definitions/Solucion"
            }
          },
          "400": {
            "description": "`Bad Request` Question title already exists.",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          },
          "401": {
            "$ref": "#/responses/401_Standard_Response"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden_Response"
          },
          "422": {
            "description": "`Unprocessable entity` Student, question title or proposed solution is left out",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "security": [
          {
            "ResultsSecurity": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Solutions"
        ],
        "summary": "Deletes a solution",
        "description": "Deletes the solution identified by `answerId`.",
        "operationId": "tdw_delete_solutions",
        "parameters": [
          {
            "$ref": "#/parameters/idAnswer"
          }
        ],
        "responses": {
          "204": {
            "description": "Solution deleted <Response body is empty>"
          },
          "401": {
            "$ref": "#/responses/401_Standard_Response"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden_Response"
          },
          "404": {
            "$ref": "#/responses/404_Resource_Not_Found_Response"
          }
        },
        "security": [
          {
            "ResultsSecurity": []
          }
        ]
      },
      "options": {
        "tags": [
          "Solutions"
        ],
        "summary": "Provides the list of HTTP supported methods",
        "description": "Return a `Allow` header with a list of HTTP supported methods.",
        "operationId": "tdw_options_solution_id",
        "parameters": [
          {
            "$ref": "#/parameters/idAnswer"
          }
        ],
        "responses": {
          "200": {
            "description": "`Allow` header <Response body is empty>"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Returns all users",
        "description": "Returns all users from the system that the user has access to.",
        "operationId": "tdw_cget_users",
        "responses": {
          "200": {
            "description": "User array response",
            "schema": {
              "$ref": "#/definitions/UsersArray"
            }
          },
          "401": {
            "$ref": "#/responses/401_Standard_Response"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden_Response"
          },
          "404": {
            "$ref": "#/responses/404_Resource_Not_Found_Response"
          }
        },
        "security": [
          {
            "ResultsSecurity": []
          }
        ]
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Creates a new user",
        "description": "Creates a new user",
        "operationId": "tdw_post_users",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "`User` properties to add to the system",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserData"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "`Created` User created",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "`Bad Request` Username or email already exists.",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          },
          "401": {
            "$ref": "#/responses/401_Standard_Response"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden_Response"
          },
          "422": {
            "description": "`Unprocessable entity` Username, e-mail or password is left out",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "security": [
          {
            "ResultsSecurity": []
          }
        ]
      },
      "options": {
        "tags": [
          "Users"
        ],
        "summary": "Provides the list of HTTP supported methods",
        "description": "Return a `Allow` header with a list of HTTP supported methods.",
        "operationId": "tdw_options_users",
        "responses": {
          "200": {
            "description": "`Allow` header <Response body is empty>"
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Returns a user based on a single ID",
        "description": "Returns the user identified by `userId`.",
        "operationId": "tdw_get_users",
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          }
        ],
        "responses": {
          "200": {
            "description": "User",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "$ref": "#/responses/401_Standard_Response"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden_Response"
          },
          "404": {
            "$ref": "#/responses/404_Resource_Not_Found_Response"
          }
        },
        "security": [
          {
            "ResultsSecurity": []
          }
        ]
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Updates a user",
        "description": "Updates the user identified by `userId`.",
        "operationId": "tdw_put_users",
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          },
          {
            "name": "data",
            "in": "body",
            "description": "`User` data to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserData"
            }
          }
        ],
        "responses": {
          "209": {
            "description": "`Content Returned` User previously existed and is now updated",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "`Bad Request` User name or e-mail already exists",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          },
          "401": {
            "$ref": "#/responses/401_Standard_Response"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden_Response"
          },
          "404": {
            "$ref": "#/responses/404_Resource_Not_Found_Response"
          }
        },
        "security": [
          {
            "ResultsSecurity": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Deletes a user",
        "description": "Deletes the user identified by `userId`.",
        "operationId": "tdw_delete_users",
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted <Response body is empty>"
          },
          "401": {
            "$ref": "#/responses/401_Standard_Response"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden_Response"
          },
          "404": {
            "$ref": "#/responses/404_Resource_Not_Found_Response"
          }
        },
        "security": [
          {
            "ResultsSecurity": []
          }
        ]
      },
      "options": {
        "tags": [
          "Users"
        ],
        "summary": "Provides the list of HTTP supported methods",
        "description": "Return a `Allow` header with a list of HTTP supported methods.",
        "operationId": "tdw_options_users_id",
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          }
        ],
        "responses": {
          "200": {
            "description": "`Allow` header <Response body is empty>"
          }
        }
      }
    }
  },
  "definitions": {
    "Question": {
      "required": [
        "enum_descripcion",
        "enum_disponible",
        "creador"
      ],
      "properties": {
        "idCuestion": {
          "description": "Question Id",
          "type": "integer",
          "format": "int32"
        },
        "enum_descripcion": {
          "description": "Description question",
          "type": "string"
        },
        "enum_disponible": {
          "description": "Available question",
          "type": "boolean"
        },
        "creador": {
          "description": "Creator",
          "type": "User"
        },
        "estado": {
          "description": "State",
          "type": "string"
        }
      },
      "example": {
        "cuestion": {
          "idCuestion": 1508,
          "enum_descripcion": "\u00bfQue es el software?",
          "enum_disponible": true,
          "creador": "User",
          "estado": "Disponible"
        }
      }
    },
    "QuestionData": {
      "properties": {
        "enum_descripcion": {
          "description": "Description question",
          "type": "string"
        },
        "enum_disponible": {
          "description": "Question available",
          "type": "boolean"
        },
        "creador": {
          "description": "Creator of question",
          "type": "Usuario"
        }
      },
      "example": {
        "enum_descripcion": "\u00bfQue es el software?",
        "creador": 1,
        "enum_disponible": true
      }
    },
    "QuestionsArray": {
      "properties": {
        "cuestiones": {
          "description": "Questions array",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Question"
          }
        }
      }
    },
    "Razonamiento": {
      "required": [
        "idSolution",
        "title",
        "justifyRationing"
      ],
      "properties": {
        "idRationing": {
          "description": "Rationing Id",
          "type": "integer",
          "format": "int32"
        },
        "idSolution": {
          "description": "Answer Id",
          "type": "integer",
          "format": "int32"
        },
        "title": {
          "description": "Title",
          "type": "string"
        },
        "justifyRationing": {
          "description": "Justify rationing",
          "type": "boolean"
        }
      },
      "example": {
        "rationing": {
          "idRationing": 1508,
          "idSolution": 1508,
          "title": "Porque si",
          "justifyRationing": true
        }
      }
    },
    "RazonamientoData": {
      "properties": {
        "idSolution": {
          "description": "Id Solution",
          "type": "integer"
        },
        "title": {
          "description": "Title",
          "type": "string"
        },
        "justifyRationing": {
          "description": "Justify rationing",
          "type": "string"
        }
      },
      "example": {
        "idSolution": 1,
        "title": "Porque si",
        "justifyRationing": true
      }
    },
    "RazonamientoArray": {
      "properties": {
        "razonamientos": {
          "description": "Razonamiento array",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Razonamiento"
          }
        }
      }
    },
    "Solucion": {
      "required": [
        "idQuestion",
        "student",
        "questionTitle",
        "proposedSolution"
      ],
      "properties": {
        "idAnswer": {
          "description": "Answer Id",
          "type": "integer",
          "format": "int32"
        },
        "idQuestion": {
          "description": "Question Id",
          "type": "integer",
          "format": "int32"
        },
        "student": {
          "description": "User name",
          "type": "string"
        },
        "questionTitle": {
          "description": "Question title",
          "type": "string"
        },
        "proposedSolution": {
          "description": "Proposed solution",
          "type": "string"
        }
      },
      "example": {
        "answer": {
          "idAnswer": 1508,
          "idQuestion": 1508,
          "student": "User name",
          "questionTitle": "\u00bfQue es el software?",
          "proposedSolution": "Es lo mejor del mundo"
        }
      }
    },
    "SolucionData": {
      "properties": {
        "idQuestion": {
          "description": "Id Question",
          "type": "integer"
        },
        "student": {
          "description": "User name",
          "type": "string"
        },
        "questionTitle": {
          "description": "Question title",
          "type": "string"
        },
        "proposedSolution": {
          "description": "Proposed solution",
          "type": "string"
        }
      },
      "example": {
        "idQuestion": 1,
        "student": "username",
        "questionTitle": "\u00bfQue es el software?",
        "proposedSolution": "Es lo mejor del mundo"
      }
    },
    "SolucionArray": {
      "properties": {
        "soluciones": {
          "description": "Solucion array",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Solucion"
          }
        }
      }
    },
    "User": {
      "required": [
        "id",
        "username",
        "email"
      ],
      "properties": {
        "id": {
          "description": "User Id",
          "type": "integer",
          "format": "int32"
        },
        "username": {
          "description": "User name",
          "type": "string"
        },
        "email": {
          "description": "User email",
          "type": "string"
        },
        "enabled": {
          "description": "Denotes if user is enabled",
          "type": "boolean"
        },
        "isMaestro": {
          "description": "Denotes if user is Maestro",
          "type": "boolean"
        },
        "isAdmin": {
          "description": "Denotes if user has admin privileges",
          "type": "boolean"
        }
      },
      "example": {
        "usuario": {
          "id": 1508,
          "username": "User name",
          "email": "User email",
          "enabled": true,
          "maestro": false,
          "admin": false
        }
      }
    },
    "UserData": {
      "properties": {
        "username": {
          "description": "User name",
          "type": "string"
        },
        "email": {
          "description": "User email",
          "type": "string"
        },
        "password": {
          "description": "User password",
          "type": "string",
          "format": "password"
        },
        "enabled": {
          "description": "Denotes if user is enabled",
          "type": "boolean"
        },
        "isMaestro": {
          "description": "Denotes if user is Maestro",
          "type": "boolean"
        },
        "isAdmin": {
          "description": "Denotes if user has admin privileges",
          "type": "boolean"
        }
      },
      "example": {
        "username": "User_name",
        "email": "User_email@example.com",
        "password": "User_password",
        "enabled": true,
        "isMaestro": false,
        "isAdmin": false
      }
    },
    "UsersArray": {
      "properties": {
        "usuarios": {
          "description": "Users array",
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        }
      }
    },
    "Message": {
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "description": "Response code",
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "description": "Response message",
          "type": "string"
        }
      },
      "example": {
        "code": "HTTP code",
        "message": "Response Message"
      }
    }
  },
  "parameters": {
    "questionId": {
      "name": "questionId",
      "in": "path",
      "description": "ID of question",
      "required": true,
      "type": "integer",
      "format": "int32"
    },
    "idRationing": {
      "name": "idRationing",
      "in": "path",
      "description": "ID of rationing",
      "required": true,
      "type": "integer",
      "format": "int32"
    },
    "idAnswer": {
      "name": "idAnswer",
      "in": "path",
      "description": "ID of answer",
      "required": true,
      "type": "integer",
      "format": "int32"
    },
    "userId": {
      "name": "userId",
      "in": "path",
      "description": "ID of user",
      "required": true,
      "type": "integer",
      "format": "int32"
    }
  },
  "responses": {
    "401_Standard_Response": {
      "description": "`Unauthorized` invalid `X-Token` header",
      "schema": {
        "$ref": "#/definitions/Message"
      }
    },
    "403_Forbidden_Response": {
      "description": "`Forbidden` You don't have permission to access",
      "schema": {
        "$ref": "#/definitions/Message"
      }
    },
    "404_Resource_Not_Found_Response": {
      "description": "`Not found` resource not found",
      "schema": {
        "$ref": "#/definitions/Message"
      }
    }
  },
  "securityDefinitions": {
    "ResultsSecurity": {
      "type": "apiKey",
      "name": "X-Token",
      "in": "header"
    }
  },
  "tags": [
    {
      "name": "login",
      "description": "user login"
    },
    {
      "name": "Users",
      "description": "User management"
    }
  ]
}
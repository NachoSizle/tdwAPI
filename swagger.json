{
    "swagger": "2.0",
    "info": {
        "title": "TDW18 User REST api",
        "description": "[UPM] TDW18 User REST api operations",
        "license": {
            "name": "MIT",
            "url": "/api-docs/LICENSE.txt"
        },
        "version": "0.1.0"
    },
    "host": "localhost:8080",
    "basePath": "/api/v1",
    "schemes": [
        "http",
        "https"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "paths": {
        "/login": {
            "post": {
                "tags": [
                    "login"
                ],
                "summary": "Returns TDW Users api token",
                "description": "Returns TDW Users api token.",
                "operationId": "tdw_post_login",
                "parameters": [
                    {
                        "name": "username",
                        "in": "formData",
                        "description": "User name",
                        "allowEmptyValue": false,
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "password",
                        "in": "formData",
                        "description": "User password",
                        "allowEmptyValue": false,
                        "required": true,
                        "type": "string",
                        "format": "password"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "TDW Users api token",
                        "schema": {
                            "type": "object",
                            "example": {
                                "X-Token": "<JSON web token>"
                            }
                        },
                        "headers": {
                            "X-Token": {
                                "description": "api token",
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/responses/404_Resource_Not_Found_Response"
                    }
                }
            }
        },
        "/categories": {
            "get": {
                "tags": [
                    "Categories"
                ],
                "summary": "Returns all categories",
                "description": "Returns all categories from the system that the user has access to.",
                "operationId": "tdw_cget_categories",
                "responses": {
                    "200": {
                        "description": "Category array response",
                        "schema": {
                            "$ref": "#/definitions/CategoriesArray"
                        }
                    },
                    "401": {
                        "$ref": "#/responses/401_Standard_Response"
                    },
                    "403": {
                        "$ref": "#/responses/403_Forbidden_Response"
                    },
                    "404": {
                        "$ref": "#/responses/404_Resource_Not_Found_Response"
                    }
                },
                "security": [
                    {
                        "ResultsSecurity": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Categories"
                ],
                "summary": "Creates a new categories",
                "description": "Creates a new categories",
                "operationId": "tdw_post_categories",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "`Categories` properties to add to the system",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CategoriaData"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "`Created` Category created",
                        "schema": {
                            "$ref": "#/definitions/Categoria"
                        }
                    },
                    "400": {
                        "description": "`Bad Request`",
                        "schema": {
                            "$ref": "#/definitions/Message"
                        }
                    },
                    "401": {
                        "$ref": "#/responses/401_Standard_Response"
                    },
                    "403": {
                        "$ref": "#/responses/403_Forbidden_Response"
                    },
                    "422": {
                        "description": "`Unprocessable entity`",
                        "schema": {
                            "$ref": "#/definitions/Message"
                        }
                    }
                },
                "security": [
                    {
                        "ResultsSecurity": []
                    }
                ]
            },
            "options": {
                "tags": [
                    "Categories"
                ],
                "summary": "Provides the list of HTTP supported methods",
                "description": "Return a `Allow` header with a list of HTTP supported methods.",
                "operationId": "tdw_options_categories",
                "responses": {
                    "200": {
                        "description": "`Allow` header <Response body is empty>"
                    }
                }
            }
        },
        "/categories/{idCategoria}": {
            "get": {
                "tags": [
                    "Categories"
                ],
                "summary": "Returns a category based on a single ID",
                "description": "Returns the category identified by `idCategoria`.",
                "operationId": "tdw_get_categories",
                "parameters": [
                    {
                        "$ref": "#/parameters/idCategoria"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Category",
                        "schema": {
                            "$ref": "#/definitions/Categoria"
                        }
                    },
                    "401": {
                        "$ref": "#/responses/401_Standard_Response"
                    },
                    "403": {
                        "$ref": "#/responses/403_Forbidden_Response"
                    },
                    "404": {
                        "$ref": "#/responses/404_Resource_Not_Found_Response"
                    }
                },
                "security": [
                    {
                        "ResultsSecurity": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Categories"
                ],
                "summary": "Updates a category",
                "description": "Updates the category identified by `idCategoria`.",
                "operationId": "tdw_put_categories",
                "parameters": [
                    {
                        "$ref": "#/parameters/idCategoria"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "`Category` data to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CategoriaData"
                        }
                    }
                ],
                "responses": {
                    "209": {
                        "description": "`Content Returned` Category previously existed and is now updated",
                        "schema": {
                            "$ref": "#/definitions/Categoria"
                        }
                    },
                    "400": {
                        "description": "`Bad Request` Category already exists",
                        "schema": {
                            "$ref": "#/definitions/Message"
                        }
                    },
                    "401": {
                        "$ref": "#/responses/401_Standard_Response"
                    },
                    "403": {
                        "$ref": "#/responses/403_Forbidden_Response"
                    },
                    "404": {
                        "$ref": "#/responses/404_Resource_Not_Found_Response"
                    }
                },
                "security": [
                    {
                        "ResultsSecurity": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Categories"
                ],
                "summary": "Deletes a category",
                "description": "Deletes the category identified by `idCategoria`.",
                "operationId": "tdw_delete_categories",
                "parameters": [
                    {
                        "$ref": "#/parameters/idCategoria"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Category deleted <Response body is empty>"
                    },
                    "401": {
                        "$ref": "#/responses/401_Standard_Response"
                    },
                    "403": {
                        "$ref": "#/responses/403_Forbidden_Response"
                    },
                    "404": {
                        "$ref": "#/responses/404_Resource_Not_Found_Response"
                    }
                },
                "security": [
                    {
                        "ResultsSecurity": []
                    }
                ]
            }
        },
        "/categories/{userId}": {
            "options": {
                "tags": [
                    "Categories"
                ],
                "summary": "Provides the list of HTTP supported methods",
                "description": "Return a `Allow` header with a list of HTTP supported methods.",
                "operationId": "tdw_options_categories_id",
                "parameters": [
                    {
                        "$ref": "#/parameters/idCategoria"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "`Allow` header <Response body is empty>"
                    }
                }
            }
        },
        "/questions": {
            "get": {
                "tags": [
                    "Questions"
                ],
                "summary": "Returns all questions",
                "description": "Returns all questions from the system that the user has access to.",
                "operationId": "tdw_cget_cuestions",
                "responses": {
                    "200": {
                        "description": "Question array response",
                        "schema": {
                            "$ref": "#/definitions/QuestionsArray"
                        }
                    },
                    "401": {
                        "$ref": "#/responses/401_Standard_Response"
                    },
                    "403": {
                        "$ref": "#/responses/403_Forbidden_Response"
                    },
                    "404": {
                        "$ref": "#/responses/404_Resource_Not_Found_Response"
                    }
                },
                "security": [
                    {
                        "ResultsSecurity": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Questions"
                ],
                "summary": "Creates a new question",
                "description": "Creates a new question",
                "operationId": "tdw_post_questions",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "`Question` properties to add to the system",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/QuestionData"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "`Created` Question created",
                        "schema": {
                            "$ref": "#/definitions/Question"
                        }
                    },
                    "400": {
                        "description": "`Bad Request` Username or email already exists.",
                        "schema": {
                            "$ref": "#/definitions/Message"
                        }
                    },
                    "401": {
                        "$ref": "#/responses/401_Standard_Response"
                    },
                    "403": {
                        "$ref": "#/responses/403_Forbidden_Response"
                    },
                    "422": {
                        "description": "`Unprocessable entity` idCuestion is left out",
                        "schema": {
                            "$ref": "#/definitions/Message"
                        }
                    }
                },
                "security": [
                    {
                        "ResultsSecurity": []
                    }
                ]
            },
            "options": {
                "tags": [
                    "Questions"
                ],
                "summary": "Provides the list of HTTP supported methods",
                "description": "Return a `Allow` header with a list of HTTP supported methods.",
                "operationId": "tdw_options_questions",
                "responses": {
                    "200": {
                        "description": "`Allow` header <Response body is empty>"
                    }
                }
            }
        },
        "/questions/{questionId}": {
            "get": {
                "tags": [
                    "Questions"
                ],
                "summary": "Returns a question based on a single ID",
                "description": "Returns the question identified by `questionId`.",
                "operationId": "tdw_get_questions",
                "parameters": [
                    {
                        "$ref": "#/parameters/questionId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Cuestion",
                        "schema": {
                            "$ref": "#/definitions/Question"
                        }
                    },
                    "401": {
                        "$ref": "#/responses/401_Standard_Response"
                    },
                    "403": {
                        "$ref": "#/responses/403_Forbidden_Response"
                    },
                    "404": {
                        "$ref": "#/responses/404_Resource_Not_Found_Response"
                    }
                },
                "security": [
                    {
                        "ResultsSecurity": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Questions"
                ],
                "summary": "Updates a question",
                "description": "Updates the question identified by `questionId`.",
                "operationId": "tdw_put_questions",
                "parameters": [
                    {
                        "$ref": "#/parameters/questionId"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "`Question` data to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/QuestionData"
                        }
                    }
                ],
                "responses": {
                    "209": {
                        "description": "`Content Returned` Question previously existed and is now updated",
                        "schema": {
                            "$ref": "#/definitions/Question"
                        }
                    },
                    "400": {
                        "description": "`Bad Request` User name or e-mail already exists",
                        "schema": {
                            "$ref": "#/definitions/Message"
                        }
                    },
                    "401": {
                        "$ref": "#/responses/401_Standard_Response"
                    },
                    "403": {
                        "$ref": "#/responses/403_Forbidden_Response"
                    },
                    "404": {
                        "$ref": "#/responses/404_Resource_Not_Found_Response"
                    }
                },
                "security": [
                    {
                        "ResultsSecurity": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Questions"
                ],
                "summary": "Deletes a question",
                "description": "Deletes the question identified by `userId`.",
                "operationId": "tdw_delete_questions",
                "parameters": [
                    {
                        "$ref": "#/parameters/questionId"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Question deleted <Response body is empty>"
                    },
                    "401": {
                        "$ref": "#/responses/401_Standard_Response"
                    },
                    "403": {
                        "$ref": "#/responses/403_Forbidden_Response"
                    },
                    "404": {
                        "$ref": "#/responses/404_Resource_Not_Found_Response"
                    }
                },
                "security": [
                    {
                        "ResultsSecurity": []
                    }
                ]
            },
            "options": {
                "tags": [
                    "Questions"
                ],
                "summary": "Provides the list of HTTP supported methods",
                "description": "Return a `Allow` header with a list of HTTP supported methods.",
                "operationId": "tdw_options_questions_id",
                "parameters": [
                    {
                        "$ref": "#/parameters/questionId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "`Allow` header <Response body is empty>"
                    }
                }
            }
        },
        "/users": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Returns all users",
                "description": "Returns all users from the system that the user has access to.",
                "operationId": "tdw_cget_users",
                "responses": {
                    "200": {
                        "description": "User array response",
                        "schema": {
                            "$ref": "#/definitions/UsersArray"
                        }
                    },
                    "401": {
                        "$ref": "#/responses/401_Standard_Response"
                    },
                    "403": {
                        "$ref": "#/responses/403_Forbidden_Response"
                    },
                    "404": {
                        "$ref": "#/responses/404_Resource_Not_Found_Response"
                    }
                },
                "security": [
                    {
                        "ResultsSecurity": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Creates a new user",
                "description": "Creates a new user",
                "operationId": "tdw_post_users",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "`User` properties to add to the system",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UserData"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "`Created` User created",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "400": {
                        "description": "`Bad Request` Username or email already exists.",
                        "schema": {
                            "$ref": "#/definitions/Message"
                        }
                    },
                    "401": {
                        "$ref": "#/responses/401_Standard_Response"
                    },
                    "403": {
                        "$ref": "#/responses/403_Forbidden_Response"
                    },
                    "422": {
                        "description": "`Unprocessable entity` Username, e-mail or password is left out",
                        "schema": {
                            "$ref": "#/definitions/Message"
                        }
                    }
                },
                "security": [
                    {
                        "ResultsSecurity": []
                    }
                ]
            },
            "options": {
                "tags": [
                    "Users"
                ],
                "summary": "Provides the list of HTTP supported methods",
                "description": "Return a `Allow` header with a list of HTTP supported methods.",
                "operationId": "tdw_options_users",
                "responses": {
                    "200": {
                        "description": "`Allow` header <Response body is empty>"
                    }
                }
            }
        },
        "/users/{userId}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Returns a user based on a single ID",
                "description": "Returns the user identified by `userId`.",
                "operationId": "tdw_get_users",
                "parameters": [
                    {
                        "$ref": "#/parameters/userId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "401": {
                        "$ref": "#/responses/401_Standard_Response"
                    },
                    "403": {
                        "$ref": "#/responses/403_Forbidden_Response"
                    },
                    "404": {
                        "$ref": "#/responses/404_Resource_Not_Found_Response"
                    }
                },
                "security": [
                    {
                        "ResultsSecurity": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Users"
                ],
                "summary": "Updates a user",
                "description": "Updates the user identified by `userId`.",
                "operationId": "tdw_put_users",
                "parameters": [
                    {
                        "$ref": "#/parameters/userId"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "`User` data to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UserData"
                        }
                    }
                ],
                "responses": {
                    "209": {
                        "description": "`Content Returned` User previously existed and is now updated",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "400": {
                        "description": "`Bad Request` User name or e-mail already exists",
                        "schema": {
                            "$ref": "#/definitions/Message"
                        }
                    },
                    "401": {
                        "$ref": "#/responses/401_Standard_Response"
                    },
                    "403": {
                        "$ref": "#/responses/403_Forbidden_Response"
                    },
                    "404": {
                        "$ref": "#/responses/404_Resource_Not_Found_Response"
                    }
                },
                "security": [
                    {
                        "ResultsSecurity": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Users"
                ],
                "summary": "Deletes a user",
                "description": "Deletes the user identified by `userId`.",
                "operationId": "tdw_delete_users",
                "parameters": [
                    {
                        "$ref": "#/parameters/userId"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "User deleted <Response body is empty>"
                    },
                    "401": {
                        "$ref": "#/responses/401_Standard_Response"
                    },
                    "403": {
                        "$ref": "#/responses/403_Forbidden_Response"
                    },
                    "404": {
                        "$ref": "#/responses/404_Resource_Not_Found_Response"
                    }
                },
                "security": [
                    {
                        "ResultsSecurity": []
                    }
                ]
            },
            "options": {
                "tags": [
                    "Users"
                ],
                "summary": "Provides the list of HTTP supported methods",
                "description": "Return a `Allow` header with a list of HTTP supported methods.",
                "operationId": "tdw_options_users_id",
                "parameters": [
                    {
                        "$ref": "#/parameters/userId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "`Allow` header <Response body is empty>"
                    }
                }
            }
        }
    },
    "definitions": {
        "Categoria": {
            "required": [
                "idCategoria"
            ],
            "properties": {
                "idCategoria": {
                    "description": "Question Id",
                    "type": "integer",
                    "format": "int32"
                },
                "prop_descripcion": {
                    "description": "Description of category",
                    "type": "string"
                },
                "enum_disponible": {
                    "description": "Available category",
                    "type": "boolean"
                }
            },
            "example": {
                "categoria": {
                    "idCategoria": 1508,
                    "prop_descripcion": "Software",
                    "enum_disponible": true
                }
            }
        },
        "CategoriaData": {
            "properties": {
                "idCategoria": {
                    "description": "Category Id",
                    "type": "integer",
                    "format": "int32"
                },
                "prop_descripcion": {
                    "description": "Description of category",
                    "type": "string"
                },
                "enum_disponible": {
                    "description": "Available category",
                    "type": "boolean"
                }
            },
            "example": {
                "prop_descripcion": "Software",
                "enum_disponible": true
            }
        },
        "CategoriesArray": {
            "properties": {
                "categorias": {
                    "description": "Categories array",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Categoria"
                    }
                }
            }
        },
        "Question": {
            "required": [
                "enum_descripcion",
                "enum_disponible",
                "creador"
            ],
            "properties": {
                "idCuestion": {
                    "description": "Question Id",
                    "type": "integer",
                    "format": "int32"
                },
                "enum_descripcion": {
                    "description": "Description question",
                    "type": "string"
                },
                "enum_disponible": {
                    "description": "Available question",
                    "type": "boolean"
                },
                "creador": {
                    "description": "Creator",
                    "type": "User"
                },
                "estado": {
                    "description": "State",
                    "type": "string"
                },
                "categorias": {
                    "description": "Categories",
                    "type": "[Categoria]"
                }
            },
            "example": {
                "cuestion": {
                    "idCuestion": 1508,
                    "enum_descripcion": "\u00bfQue es el software?",
                    "enum_disponible": true,
                    "creador": "User",
                    "estado": "Disponible",
                    "categorias": "[Categoria]"
                }
            }
        },
        "QuestionData": {
            "properties": {
                "enum_descripcion": {
                    "description": "Description question",
                    "type": "string"
                },
                "enum_disponible": {
                    "description": "Question available",
                    "type": "boolean"
                },
                "creador": {
                    "description": "Creator of question",
                    "type": "Usuario"
                }
            },
            "example": {
                "enum_descripcion": "\u00bfQue es el software?",
                "creador": 1,
                "enum_disponible": true
            }
        },
        "QuestionsArray": {
            "properties": {
                "cuestiones": {
                    "description": "Questions array",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Question"
                    }
                }
            }
        },
        "User": {
            "required": [
                "id",
                "username",
                "email"
            ],
            "properties": {
                "id": {
                    "description": "User Id",
                    "type": "integer",
                    "format": "int32"
                },
                "username": {
                    "description": "User name",
                    "type": "string"
                },
                "email": {
                    "description": "User email",
                    "type": "string"
                },
                "enabled": {
                    "description": "Denotes if user is enabled",
                    "type": "boolean"
                },
                "isMaestro": {
                    "description": "Denotes if user is Maestro",
                    "type": "boolean"
                },
                "isAdmin": {
                    "description": "Denotes if user has admin privileges",
                    "type": "boolean"
                }
            },
            "example": {
                "usuario": {
                    "id": 1508,
                    "username": "User name",
                    "email": "User email",
                    "enabled": true,
                    "maestro": false,
                    "admin": false
                }
            }
        },
        "UserData": {
            "properties": {
                "username": {
                    "description": "User name",
                    "type": "string"
                },
                "email": {
                    "description": "User email",
                    "type": "string"
                },
                "password": {
                    "description": "User password",
                    "type": "string",
                    "format": "password"
                },
                "enabled": {
                    "description": "Denotes if user is enabled",
                    "type": "boolean"
                },
                "isMaestro": {
                    "description": "Denotes if user is Maestro",
                    "type": "boolean"
                },
                "isAdmin": {
                    "description": "Denotes if user has admin privileges",
                    "type": "boolean"
                }
            },
            "example": {
                "username": "User_name",
                "email": "User_email@example.com",
                "password": "User_password",
                "enabled": true,
                "isMaestro": false,
                "isAdmin": false
            }
        },
        "UsersArray": {
            "properties": {
                "usuarios": {
                    "description": "Users array",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/User"
                    }
                }
            }
        },
        "Message": {
            "required": [
                "code",
                "message"
            ],
            "properties": {
                "code": {
                    "description": "Response code",
                    "type": "integer",
                    "format": "int32"
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                }
            },
            "example": {
                "code": "HTTP code",
                "message": "Response Message"
            }
        }
    },
    "parameters": {
        "idCategoria": {
            "name": "idCategoria",
            "in": "path",
            "description": "ID of category",
            "required": true,
            "type": "integer",
            "format": "int32"
        },
        "questionId": {
            "name": "questionId",
            "in": "path",
            "description": "ID of question",
            "required": true,
            "type": "integer",
            "format": "int32"
        },
        "userId": {
            "name": "userId",
            "in": "path",
            "description": "ID of user",
            "required": true,
            "type": "integer",
            "format": "int32"
        }
    },
    "responses": {
        "401_Standard_Response": {
            "description": "`Unauthorized` invalid `X-Token` header",
            "schema": {
                "$ref": "#/definitions/Message"
            }
        },
        "403_Forbidden_Response": {
            "description": "`Forbidden` You don't have permission to access",
            "schema": {
                "$ref": "#/definitions/Message"
            }
        },
        "404_Resource_Not_Found_Response": {
            "description": "`Not found` resource not found",
            "schema": {
                "$ref": "#/definitions/Message"
            }
        }
    },
    "securityDefinitions": {
        "ResultsSecurity": {
            "type": "apiKey",
            "name": "X-Token",
            "in": "header"
        }
    },
    "tags": [
        {
            "name": "login",
            "description": "user login"
        },
        {
            "name": "Users",
            "description": "User management"
        }
    ]
}